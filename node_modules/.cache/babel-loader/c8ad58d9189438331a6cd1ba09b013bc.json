{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs2/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/asyncToGenerator\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _now = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/date/now\"));\n\nmodule.exports = function until(cb) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var failMsg = opts.failMsg,\n      _opts$timeout = opts.timeout,\n      timeout = _opts$timeout === void 0 ? 300 : _opts$timeout,\n      _opts$loopDelay = opts.loopDelay,\n      loopDelay = _opts$loopDelay === void 0 ? 0 : _opts$loopDelay,\n      _opts$minLoops = opts.minLoops,\n      minLoops = _opts$minLoops === void 0 ? 3 : _opts$minLoops;\n  var t1 = (0, _now.default)();\n  return new _promise.default(function (resolve, reject) {\n    // Why the loop count if we already have a timeout? Well, say something\n    // happens and our program freezes for a timeout + 1ms duration. The\n    // callback will run in the next loop and instantly expire if the condition\n    // isn't met. Sometimes our app releases a chain of async callbacks that\n    // need to fulfill before our condition is met, so the min loop count\n    // ensures we don't bail too soon in case of a hiccup.\n    var loopCount = 0;\n\n    function loop() {\n      return _loop.apply(this, arguments);\n    }\n\n    function _loop() {\n      _loop = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee() {\n        return _regenerator.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                loopCount += 1;\n                _context.next = 3;\n                return run();\n\n              case 3:\n                if (!_context.sent) {\n                  _context.next = 7;\n                  break;\n                }\n\n                resolve(true);\n                _context.next = 8;\n                break;\n\n              case 7:\n                if ((0, _now.default)() - t1 < timeout || loopCount < minLoops) {\n                  setTimeout(loop, loopDelay);\n                } else {\n                  reject(new Error(failMsg || getDefaultMessage(cb)));\n                }\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      return _loop.apply(this, arguments);\n    }\n\n    function run() {\n      return _run.apply(this, arguments);\n    } // Kick it\n\n\n    function _run() {\n      _run = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee2() {\n        return _regenerator.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                return _context2.abrupt(\"return\", cb());\n\n              case 4:\n                _context2.prev = 4;\n                _context2.t0 = _context2[\"catch\"](0);\n                reject(_context2.t0);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 4]]);\n      }));\n      return _run.apply(this, arguments);\n    }\n\n    loop();\n  });\n};\n\nfunction getDefaultMessage(cb) {\n  return \"Timeout expired. Condition wasn't met: \".concat(cb);\n}","map":null,"metadata":{},"sourceType":"script"}