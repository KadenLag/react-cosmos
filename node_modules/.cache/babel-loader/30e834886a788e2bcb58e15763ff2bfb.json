{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _extends4 = require('babel-runtime/helpers/extends');\n\nvar _extends5 = _interopRequireDefault(_extends4);\n\nexports.getNormalizedFixtureModules = getNormalizedFixtureModules;\nexports.getOldSchoolFixturesFromNewStyleComponents = getOldSchoolFixturesFromNewStyleComponents;\n\nvar _importModule = require('./import-module');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // Old fixtures don't have a `component` property. To support both old & new\n// fixtures simultaneously, old style fixtures are altered on the fly by\n// adding each fixture's corresponding component in the fixture body.\n// FYI: deprecatedComponentModules is empty when using new style fixtures\n// exclusively.\n\n\nfunction getNormalizedFixtureModules(fixtureModules, fixtureFiles) {\n  var deprecatedComponentModules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var alteredFixtures = new Set();\n  var invalidFixtures = new Set();\n  var modules = Object.keys(fixtureModules).reduce(function (acc, next) {\n    var fixtureModule = (0, _importModule.importModule)(fixtureModules[next]); // Component seems to be up to date, no alteration needed\n    // Warn: Since multi fixtures weren't supported before v3, we assume multi\n    // fixtures (Array default export) to be legit new style fixtures\n\n    if (Array.isArray(fixtureModule) || fixtureModule.component) {\n      return (0, _extends5.default)({}, acc, (0, _defineProperty3.default)({}, next, fixtureModule));\n    }\n\n    try {\n      var fixtureFile = fixtureFiles.find(function (f) {\n        return f.filePath === next;\n      });\n\n      if (!fixtureFile) {\n        throw new Error('Missing fixture file for path: ' + next);\n      }\n\n      var components = fixtureFile.components;\n\n      var _components = (0, _slicedToArray3.default)(components, 1),\n          component1 = _components[0];\n\n      if (!component1 || !component1.filePath) {\n        throw new Error('Missing component data for fixture path: ' + next);\n      }\n\n      var componentModule = deprecatedComponentModules[component1.filePath];\n      var component = (0, _importModule.importModule)(componentModule);\n      alteredFixtures.add(next);\n      return (0, _extends5.default)({}, acc, (0, _defineProperty3.default)({}, next, (0, _extends5.default)({}, fixtureModule, {\n        component: component\n      })));\n    } catch (err) {\n      invalidFixtures.add(next);\n      return acc;\n    }\n  }, {});\n\n  if (alteredFixtures.size > 0) {\n    console.log('[Cosmos] Successfully read ' + alteredFixtures.size + ' old school fixtures:');\n    console.log(getPrintableListFromPaths(alteredFixtures));\n  }\n\n  if (invalidFixtures.size > 0) {\n    console.warn('[Cosmos] Failed to read ' + invalidFixtures.size + ' fixtures:');\n    console.warn(getPrintableListFromPaths(invalidFixtures));\n  }\n\n  if (alteredFixtures.size > 0 || invalidFixtures.size > 0) {\n    console.log('[Cosmos] Upgrade these fixtures by adding the `component` property.');\n    console.log('[Cosmos] More details at https://github.com/react-cosmos/react-cosmos/issues/440');\n  }\n\n  return modules;\n} // TEMP: The new data structures are ready on the server, but are not\n// yet adopted on the client. This conversion will be removed when the Loader\n// and CP start working with the types from react-cosmos-voyager2\n\n\nfunction getOldSchoolFixturesFromNewStyleComponents(newStyleComponents) {\n  var fixtures = {};\n  newStyleComponents.forEach(function (c) {\n    var componentName = getObjectPath(c);\n    fixtures[componentName] = {};\n    c.fixtures.forEach(function (f) {\n      var fixtureName = getObjectPath(f);\n      fixtures[componentName][fixtureName] = f.source;\n    });\n  });\n  return fixtures;\n}\n\nfunction getPrintableListFromPaths(set) {\n  return [].concat((0, _toConsumableArray3.default)(set.values())).map(function (f) {\n    return '- ' + f;\n  }).join('\\n');\n}\n\nfunction getObjectPath(obj) {\n  return obj.namespace ? obj.namespace + '/' + obj.name : obj.name;\n}","map":null,"metadata":{},"sourceType":"script"}