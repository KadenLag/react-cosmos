{"ast":null,"code":"'use strict';\n\nvar _reactErrorOverlay = require('react-error-overlay');\n\nvar ErrorOverlay = _interopRequireWildcard(_reactErrorOverlay);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nif (process.env.NODE_ENV === 'development') {\n  // Report runtime errors\n  ErrorOverlay.startReportingRuntimeErrors({\n    onError: function onError() {\n      // Let the Playground know when the Loader crashes\n      parent.postMessage({\n        type: 'runtimeError'\n      }, '*');\n    },\n    filename: process.env.PUBLIC_URL + '/main.js'\n  });\n  ErrorOverlay.setEditorHandler(function (errorLocation) {\n    return window.fetch('/__open-stack-frame-in-editor?fileName=' + window.encodeURIComponent(errorLocation.fileName) + '&lineNumber=' + window.encodeURIComponent(errorLocation.lineNumber || 1));\n  });\n\n  if (window.__webpack_hot_middleware_reporter__ !== undefined) {\n    // Report build errors\n    window.__webpack_hot_middleware_reporter__.useCustomOverlay({\n      showProblems: function showProblems(type, obj) {\n        if (type !== 'errors') {\n          // We might've went from errors -> warnings\n          ErrorOverlay.dismissBuildError();\n          return;\n        }\n\n        ErrorOverlay.reportBuildError(obj[0]);\n      },\n      clear: function clear() {\n        ErrorOverlay.dismissBuildError();\n      }\n    });\n  }\n}\n/* global window */","map":null,"metadata":{},"sourceType":"script"}