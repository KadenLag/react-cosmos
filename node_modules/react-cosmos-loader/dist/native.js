'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CosmosNativeLoader = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _socket = require('socket.io-client');

var _socket2 = _interopRequireDefault(_socket);

var _urlParse = require('url-parse');

var _urlParse2 = _interopRequireDefault(_urlParse);

var _reactCosmosShared = require('react-cosmos-shared');

var _client = require('react-cosmos-voyager2/client');

var _connectLoader = require('./connect-loader');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// https://github.com/facebook/react-native/issues/19797
// $FlowFixMe
var socket = void 0;

var destroyLoader = void 0;

var CosmosNativeLoader = exports.CosmosNativeLoader = function (_Component) {
  (0, _inherits3.default)(CosmosNativeLoader, _Component);

  function CosmosNativeLoader() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, CosmosNativeLoader);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = CosmosNativeLoader.__proto__ || Object.getPrototypeOf(CosmosNativeLoader)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      element: null
    }, _this.unmounted = false, _this.initLoader = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
      var _this$props, port, _this$props$modules, fixtureFiles, fixtureModules, proxies, components, fixtures;

      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _this$props = _this.props, port = _this$props.options.port, _this$props$modules = _this$props.modules, fixtureFiles = _this$props$modules.fixtureFiles, fixtureModules = _this$props$modules.fixtureModules, proxies = _this$props$modules.proxies;
              components = (0, _client.getComponents)({
                fixtureFiles: fixtureFiles,
                fixtureModules: (0, _reactCosmosShared.getNormalizedFixtureModules)(fixtureModules, fixtureFiles)
              });
              fixtures = (0, _reactCosmosShared.getOldSchoolFixturesFromNewStyleComponents)(components);


              socket = (0, _socket2.default)(getSocketUrl(port));

              _context.next = 6;
              return (0, _connectLoader.connectLoader)({
                renderer: _this.loaderRenderer,
                proxies: (0, _reactCosmosShared.importModule)(proxies),
                fixtures: fixtures,
                subscribe: subscribe,
                unsubscribe: unsubscribe,
                sendMessage: sendMessage
              });

            case 6:
              destroyLoader = _context.sent;

            case 7:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this2);
    })), _this.loaderRenderer = function (element) {
      _this.setState({
        element: element
      });

      return {
        unmount: function unmount() {
          if (!_this.unmounted) {
            _this.setState({
              element: null
            });
          }
        }
      };
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(CosmosNativeLoader, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.initLoader();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.unmounted = true;

      if (destroyLoader) {
        destroyLoader();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var element = this.state.element;


      return element || _react2.default.createElement(
        _reactNative.View,
        null,
        _react2.default.createElement(
          _reactNative.Text,
          null,
          'No fixture selected'
        )
      );
    }
  }]);
  return CosmosNativeLoader;
}(_react.Component);

function subscribe(msgHandler) {
  socket.on('cosmos-cmd', msgHandler);
}

function unsubscribe() {
  socket.off('cosmos-cmd');
}

function sendMessage(msg) {
  socket.emit('cosmos-cmd', msg);
}

function getSocketUrl(port) {
  var host = (0, _urlParse2.default)(_reactNative.NativeModules.SourceCode.scriptURL).hostname;

  return 'ws://' + host + ':' + port;
}