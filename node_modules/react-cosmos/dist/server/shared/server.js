'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

exports.createServerApp = createServerApp;
exports.createServer = createServer;
exports.serveStaticDir = serveStaticDir;
exports.attachStackFrameEditorLauncher = attachStackFrameEditorLauncher;
exports.getRootUrl = getRootUrl;

var _path = require('path');

var _http = require('http');

var _util = require('util.promisify');

var _util2 = _interopRequireDefault(_util);

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _httpProxyMiddleware = require('http-proxy-middleware');

var _httpProxyMiddleware2 = _interopRequireDefault(_httpProxyMiddleware);

var _launchEditor = require('react-dev-utils/launchEditor');

var _launchEditor2 = _interopRequireDefault(_launchEditor);

var _playgroundHtml = require('./playground-html');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createServerApp(_ref) {
  var cosmosConfig = _ref.cosmosConfig,
      playgroundOpts = _ref.playgroundOpts;
  var httpProxy = cosmosConfig.httpProxy;

  var app = (0, _express2.default)();

  if (httpProxy) {
    var context = httpProxy.context,
        target = httpProxy.target;

    app.use(context, (0, _httpProxyMiddleware2.default)(target));
  }

  var playgroundHtml = (0, _playgroundHtml.getPlaygroundHtml)(cosmosConfig, playgroundOpts);
  app.get('/', function (req, res) {
    res.send(playgroundHtml);
  });

  app.get('/_playground.js', function (req, res) {
    res.sendFile(require.resolve('react-cosmos-playground'));
  });

  app.get('/_cosmos.ico', function (req, res) {
    res.sendFile((0, _path.join)(__dirname, 'static/favicon.ico'));
  });

  return app;
}

function createServer(cosmosConfig, app) {
  var startServer = function () {
    var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
      var listen, hostnameDisplay;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              listen = (0, _util2.default)(server.listen.bind(server));
              _context.next = 3;
              return listen(port, hostname);

            case 3:
              hostnameDisplay = hostname || 'localhost';

              console.log('[Cosmos] See you at http://' + hostnameDisplay + ':' + port + '/');

            case 5:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function startServer() {
      return _ref2.apply(this, arguments);
    };
  }();

  var stopServer = function () {
    var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return (0, _util2.default)(server.close.bind(server))();

            case 2:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function stopServer() {
      return _ref3.apply(this, arguments);
    };
  }();

  var port = cosmosConfig.port,
      hostname = cosmosConfig.hostname;

  var server = (0, _http.createServer)(app);

  return { server: server, startServer: startServer, stopServer: stopServer };
}

function serveStaticDir(app, publicUrl, publicPath) {
  var relPublicPath = (0, _path.relative)(process.cwd(), publicPath);
  console.log('[Cosmos] Serving static files from ' + relPublicPath);

  app.use(getRootUrl(publicUrl), _express2.default.static(publicPath, {
    // Ensure loader index (generated by html-webpack-plugin) loads instead
    // of the index.html from publicPath
    index: false
  }));
}

function attachStackFrameEditorLauncher(app) {
  app.get('/__open-stack-frame-in-editor', function (req, res) {
    (0, _launchEditor2.default)(req.query.fileName, req.query.lineNumber);
    res.end();
  });
}

function getRootUrl(publicUrl) {
  // To enable deploying static exports running from inside a nested path,
  // publicUrl can be set to `./`.
  // (See https://github.com/react-cosmos/react-cosmos/issues/777)
  // But publicUrl is used in for some paths which must begin with `/`:
  // - As publicPath in webpack-dev-middleware
  // - As the Express path for serving static assets
  // These are server-side modules (running in dev server mode) that only
  // respond to incoming paths which begin with the root URL we specify.
  return publicUrl === './' ? '/' : publicUrl;
}