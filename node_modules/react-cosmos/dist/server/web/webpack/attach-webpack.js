'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.attachWebpack = attachWebpack;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _util = require('util.promisify');

var _util2 = _interopRequireDefault(_util);

var _webpackDevMiddleware = require('webpack-dev-middleware');

var _webpackDevMiddleware2 = _interopRequireDefault(_webpackDevMiddleware);

var _webpackHotMiddleware = require('webpack-hot-middleware');

var _webpackHotMiddleware2 = _interopRequireDefault(_webpackHotMiddleware);

var _server = require('../../shared/server');

var _enhanceWebpackConfig = require('./enhance-webpack-config');

var _enhanceWebpackConfig2 = _interopRequireDefault(_enhanceWebpackConfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function attachWebpack(_ref) {
  var cosmosConfig = _ref.cosmosConfig,
      app = _ref.app,
      webpack = _ref.webpack,
      userWebpackConfig = _ref.userWebpackConfig;
  var publicUrl = cosmosConfig.publicUrl,
      hot = cosmosConfig.hot;


  var loaderWebpackConfig = (0, _enhanceWebpackConfig2.default)({
    webpack: webpack,
    userWebpackConfig: userWebpackConfig
  });
  var webpackCompiler = webpack(loaderWebpackConfig);

  webpackCompiler.plugin('invalid', function (filePath) {
    // Old versions of webpack call this hook without a file path argument
    if (typeof filePath === 'string') {
      var relFilePath = _path2.default.relative(process.cwd(), filePath);
      console.log('[Cosmos] webpack build invalidated by', relFilePath);
    }
  });

  var onWebpackDone = new Promise(function (resolve) {
    return webpackCompiler.plugin('done', resolve);
  });

  console.log('[Cosmos] Building webpack...');
  var wdmInst = (0, _webpackDevMiddleware2.default)(webpackCompiler, {
    // publicPath is the base path for the webpack assets and has to match
    // webpack.output.path
    publicPath: (0, _server.getRootUrl)(publicUrl),
    logLevel: 'warn'
  });

  app.use(wdmInst);

  if (hot) {
    app.use((0, _webpackHotMiddleware2.default)(webpackCompiler));
  }

  function stopWebpack() {
    return (0, _util2.default)(wdmInst.close.bind(wdmInst))();
  }

  return { onWebpackDone: onWebpackDone, stopWebpack: stopWebpack };
}