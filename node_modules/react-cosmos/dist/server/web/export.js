'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateExport = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var generateExport = exports.generateExport = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
    var cosmosConfig, rootPath, outputPath, publicPath, publicUrl, webpack, userWebpackConfig, loaderWebpackConfig, exportPublicPath;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            cosmosConfig = (0, _reactCosmosConfig.getCosmosConfig)();
            rootPath = cosmosConfig.rootPath, outputPath = cosmosConfig.outputPath, publicPath = cosmosConfig.publicPath, publicUrl = cosmosConfig.publicUrl;
            webpack = (0, _importFrom.silent)(rootPath, 'webpack');

            if (webpack) {
              _context.next = 7;
              break;
            }

            console.warn('[Cosmos] webpack dependency missing!');
            console.log('Install using "yarn add webpack" or "npm install webpack"');
            return _context.abrupt('return');

          case 7:
            userWebpackConfig = (0, _userWebpackConfig.getUserWebpackConfig)(cosmosConfig);
            loaderWebpackConfig = (0, _enhanceWebpackConfig2.default)({
              webpack: webpack,
              userWebpackConfig: userWebpackConfig,
              shouldExport: true
            });

            // Copy static files first, so that the built index.html overrides the its
            // template file (in case the static assets are served from the root path)

            if (publicPath) {
              if (outputPath.indexOf(publicPath) === -1) {
                exportPublicPath = _path2.default.join(outputPath, publicUrl);

                if (_fsExtra2.default.existsSync(publicPath)) {
                  _fsExtra2.default.copySync(publicPath, exportPublicPath);
                } else {
                  console.log('[Cosmos] Warning: config.publicPath points to missing dir', publicPath);
                }
              } else {
                console.warn('[Cosmos] Warning: Can\'t export public path because it contains the export path! (avoiding infinite loop)');
                console.warn('Public path:', publicPath);
                console.warn('Export path:', outputPath);
              }
            }

            _context.next = 12;
            return runWebpackCompiler(webpack, loaderWebpackConfig).then(function () {
              exportPlaygroundFiles(cosmosConfig, outputPath);
            }).then(function () {
              console.log('[Cosmos] Export Complete! Find the exported files here:');
              console.log(outputPath);
            }, function (err) {
              console.error('[Cosmos] Export Failed! See error below:');
              console.error(err);
            });

          case 12:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function generateExport() {
    return _ref.apply(this, arguments);
  };
}();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _importFrom = require('import-from');

var _reactCosmosConfig = require('react-cosmos-config');

var _playgroundHtml = require('../shared/playground-html');

var _enhanceWebpackConfig = require('./webpack/enhance-webpack-config');

var _enhanceWebpackConfig2 = _interopRequireDefault(_enhanceWebpackConfig);

var _userWebpackConfig = require('./webpack/user-webpack-config');

var _playgroundOpts = require('./playground-opts');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var exportPlaygroundFiles = function exportPlaygroundFiles(cosmosConfig, outputPath) {
  _fsExtra2.default.copySync(_path2.default.join(__dirname, '../shared/static/favicon.ico'), outputPath + '/_cosmos.ico');

  _fsExtra2.default.copySync(require.resolve('react-cosmos-playground'), outputPath + '/_playground.js');

  var playgroundOpts = (0, _playgroundOpts.getPlaygroundOpts)(cosmosConfig);
  var playgroundHtml = (0, _playgroundHtml.getPlaygroundHtml)(cosmosConfig, playgroundOpts);
  _fsExtra2.default.writeFileSync(outputPath + '/index.html', playgroundHtml);
};

var runWebpackCompiler = function runWebpackCompiler(webpack, config) {
  return new Promise(function (resolve, reject) {
    var compiler = webpack(config);
    compiler.run(function (err, stats) {
      if (err) {
        reject(err);
      } else {
        resolve(stats);
      }
    });
  });
};