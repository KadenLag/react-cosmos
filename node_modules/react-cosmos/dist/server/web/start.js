'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startServer = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var startServer = exports.startServer = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
    var _this = this;

    var generatedConfigFor, cosmosConfig, rootPath, publicUrl, webpack, userWebpackConfig, app, _createServer, startServer, stopServer, publicPath, _attachWebpack, onWebpackDone, stopWebpack;

    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(0, _reactCosmosConfig.hasUserCosmosConfig)()) {
              generatedConfigFor = (0, _reactCosmosConfig.generateCosmosConfig)();

              if (generatedConfigFor) {
                console.log('[Cosmos] Nice! You\'re using ' + generatedConfigFor);
                console.log('[Cosmos] Generated a tailored config file for your setup');
              }
            }

            cosmosConfig = (0, _reactCosmosConfig.getCosmosConfig)();
            rootPath = cosmosConfig.rootPath, publicUrl = cosmosConfig.publicUrl;


            if (cosmosConfig.proxies) {
              console.warn('[Cosmos] Warning: config.proxies is deprecated!');
              console.warn('Please check latest proxy docs: https://github.com/react-cosmos/react-cosmos#proxies');
            }

            webpack = (0, _importFrom.silent)(rootPath, 'webpack');

            if (webpack) {
              _context2.next = 9;
              break;
            }

            console.warn('[Cosmos] webpack dependency missing!');
            console.log('Install using "yarn add webpack" or "npm install webpack"');

            return _context2.abrupt('return', function () {});

          case 9:
            userWebpackConfig = (0, _userWebpackConfig.getUserWebpackConfig)(cosmosConfig);
            app = (0, _server.createServerApp)({
              cosmosConfig: cosmosConfig,
              playgroundOpts: (0, _playgroundOpts.getPlaygroundOpts)(cosmosConfig)
            });
            _createServer = (0, _server.createServer)(cosmosConfig, app), startServer = _createServer.startServer, stopServer = _createServer.stopServer;
            publicPath = getPublicPath(cosmosConfig, userWebpackConfig);

            if (publicPath) {
              (0, _server.serveStaticDir)(app, publicUrl, publicPath);
            }

            (0, _server.attachStackFrameEditorLauncher)(app);

            _attachWebpack = (0, _attachWebpack2.attachWebpack)({
              cosmosConfig: cosmosConfig,
              app: app,
              webpack: webpack,
              userWebpackConfig: userWebpackConfig
            }), onWebpackDone = _attachWebpack.onWebpackDone, stopWebpack = _attachWebpack.stopWebpack;
            _context2.next = 18;
            return startServer();

          case 18:
            _context2.next = 20;
            return onWebpackDone;

          case 20:
            return _context2.abrupt('return', (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
              return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.next = 2;
                      return stopWebpack();

                    case 2:
                      _context.next = 4;
                      return stopServer();

                    case 4:
                    case 'end':
                      return _context.stop();
                  }
                }
              }, _callee, _this);
            })));

          case 21:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function startServer() {
    return _ref.apply(this, arguments);
  };
}();

var _importFrom = require('import-from');

var _reactCosmosConfig = require('react-cosmos-config');

var _userWebpackConfig = require('./webpack/user-webpack-config');

var _server = require('../shared/server');

var _attachWebpack2 = require('./webpack/attach-webpack');

var _playgroundOpts = require('./playground-opts');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getPublicPath(cosmosConfig, webpackConfig) {
  return cosmosConfig.publicPath || webpackConfig.devServer && webpackConfig.devServer.contentBase;
}