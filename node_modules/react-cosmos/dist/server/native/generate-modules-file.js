'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateModulesFile = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var generateModulesFile = exports.generateModulesFile = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(cosmosConfig) {
    var modulesPath, modules, relModulesPath;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            modulesPath = cosmosConfig.modulesPath;
            _context.next = 3;
            return generateModuleImports(cosmosConfig);

          case 3:
            modules = _context.sent;
            _context.next = 6;
            return writeFileAsync(modulesPath, modules, 'utf8');

          case 6:
            relModulesPath = (0, _path.relative)(process.cwd(), modulesPath);

            console.log('[Cosmos] Generated ' + relModulesPath);

          case 8:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function generateModulesFile(_x) {
    return _ref.apply(this, arguments);
  };
}();

var generateModuleImports = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(cosmosConfig) {
    var rootPath, fileMatch, fileMatchIgnore, exclude, proxiesPath, port, fixtureFiles, fixturePaths, fixtureModuleCalls;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            rootPath = cosmosConfig.rootPath, fileMatch = cosmosConfig.fileMatch, fileMatchIgnore = cosmosConfig.fileMatchIgnore, exclude = cosmosConfig.exclude, proxiesPath = cosmosConfig.proxiesPath, port = cosmosConfig.port;
            _context2.next = 3;
            return (0, _server2.findFixtureFiles)({
              rootPath: rootPath,
              fileMatch: fileMatch,
              fileMatchIgnore: fileMatchIgnore,
              exclude: exclude
            });

          case 3:
            fixtureFiles = _context2.sent;
            fixturePaths = fixtureFiles.map(function (file) {
              return file.filePath;
            });
            fixtureModuleCalls = convertPathsToRequireCalls(fixturePaths);
            return _context2.abrupt('return', TEMPLATE.replace(/PORT/, String(port)).replace(/FIXTURE_MODULES/g, fixtureModuleCalls).replace(/FIXTURE_FILES/g, JSON.stringify(fixtureFiles)).replace(/PROXIES/g, (0, _server.moduleExists)(proxiesPath) ? convertPathToRequireCall(proxiesPath) : '[]'));

          case 7:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function generateModuleImports(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

var _path = require('path');

var _fs = require('fs');

var _util = require('util.promisify');

var _util2 = _interopRequireDefault(_util);

var _server = require('react-cosmos-shared/server');

var _server2 = require('react-cosmos-voyager2/server');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var writeFileAsync = (0, _util2.default)(_fs.writeFile);

var TEMPLATE = '// This file is automatically generated by Cosmos. Best ignore it.\nexport const options = {\n  port: PORT\n};\n\nexport function getUserModules() {\n  return {\n    fixtureModules: FIXTURE_MODULES,\n    fixtureFiles: FIXTURE_FILES,\n    proxies: PROXIES\n  }\n};\n';

function convertPathsToRequireCalls(paths) {
  var entries = paths.map(function (p) {
    return '\'' + p + '\':' + convertPathToRequireCall(p);
  });

  return '{' + entries.join(',') + '}';
}

function convertPathToRequireCall(p) {
  return 'require(\'' + p + '\')';
}